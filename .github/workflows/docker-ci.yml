name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout source code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run Python syntax check
        run: python -m py_compile app.py

      - name: Install pytest
        run: |
          pip install pytest

      - name: Run unit tests
        run: |
          if [ -d "tests/" ]; then
            pytest tests/ --verbose
          else
            echo "No tests/ directory found, skipping unit tests"
          fi

      - name: Scan Python dependencies for vulnerabilities
        run: |
          pip install safety
          safety check -r requirements.txt

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}

      - name: Build and push DockerHub image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: i3cwg/k8s-project:latest

      - name: Scan Docker image for vulnerabilities
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: i3cwg/k8s-project:latest
          format: table
          severity: HIGH,CRITICAL

  deploy:
    runs-on: ubuntu-latest
    needs: build-and-test
    steps:
      - name: Checkout source code
        uses: actions/checkout@v4

      - name: Install Minikube & Start Cluster
        run: |
          curl -LO https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64
          sudo install minikube-linux-amd64 /usr/local/bin/minikube
          minikube start --driver=docker
          minikube status

      - name: Set up kubectl
        run: |
          sudo apt-get install -y kubectl
          kubectl version --client

      - name: Show Minikube nodes
        run: minikube kubectl -- get nodes

      - name: Apply Kubernetes manifests
        run: |
          minikube kubectl -- apply -f k8s/deployment.yaml
          minikube kubectl -- apply -f k8s/services.yaml

      - name: Wait for Pods to be Ready
        run: |
          minikube kubectl -- wait --for=condition=ready pod -l app=flaskapp --timeout=300s
          minikube kubectl -- get pods

      - name: Port forward test
        run: |
          POD_NAME=$(minikube kubectl -- get pod -l app=flaskapp -o jsonpath="{.items[0].metadata.name}")
          echo "Forwarding port for $POD_NAME..."
          nohup minikube kubectl -- port-forward pod/$POD_NAME 5000:5000 &
          sleep 5
          curl http://localhost:5000 || echo "App not responding"

      # # AWS ECR login & push
      # - name: Configure AWS credentials
      #   uses: aws-actions/configure-aws-credentials@v3
      #   with:
      #     aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
      #     aws-secret-access-key: ${{ secrets.AWS_ACCESS_SECRET }}
      #     aws-region: ap-southeast-2

      # - name: Login to Amazon ECR
      #   id: ecr-login
      #   run: |
      #     aws ecr get-login-password --region ap-southeast-2 | docker login --username AWS --password-stdin 053277883308.dkr.ecr.ap-southeast-2.amazonaws.com

      # - name: Build and push ECR image
      #   uses: docker/build-push-action@v5
      #   with:
      #     context: .
      #     push: true
      #     tags: 053277883308.dkr.ecr.ap-southeast-2.amazonaws.com/k8s-project:latest

#  deploy-to-ec2:
#    needs: build-and-push
#    runs-on: ubuntu-latest
#
#    steps:
#      - name: SSH and deploy on EC2
#        uses: appleboy/ssh-action@v1.0.3
#        with:
#          host: ${{ secrets.EC2_HOST }}
#          username: ubuntu
#          key: ${{ secrets.EC2_SSH_KEY }}
#          script: |
#            aws ecr get-login-password --region ap-southeast-2 | docker login --username AWS --password-stdin 053277883308.dkr.ecr.ap-southeast-2.amazonaws.com
#            docker pull 053277883308.dkr.ecr.ap-southeast-2.amazonaws.com/k8s-project:latest
#            docker stop my-app || true
#            docker rm my-app || true
#           docker run -d --name my-app -p 80:5000 053277883308.dkr.ecr.ap-southeast-2.amazonaws.com/k8s-project:latest

  # deploy-to-ecs:
  #   needs: build-and-push
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4
      
  #     - name: Configure AWS credentials
  #       uses: aws-actions/configure-aws-credentials@v3
  #       with:
  #         aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
  #         aws-secret-access-key: ${{ secrets.AWS_ACCESS_SECRET }}
  #         aws-region: ap-southeast-2

  #     - name: Update ECS Service to use new image
  #       run: |
  #         aws ecs update-service \
  #           --cluster k8s-cluster-project \
  #           --service k8s-project-task-service-gzl8ewe4 \
  #           --force-new-deployment
