name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  REGISTRY: docker.io
  IMAGE_NAME: i3cwg/k8s-project

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout source code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install black flake8 pytest pytest-cov

      - name: Format code with Black
        run: |
          black . --line-length=88
          git diff --exit-code || echo "Code was reformatted by Black. Please commit the changes."

      - name: Run linting with Flake8
        run: |
          flake8 . --max-line-length=88 --extend-ignore=E203 --output-file=flake8-report.txt

      - name: Upload linting report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: flake8-report
          path: flake8-report.txt

      - name: Run tests with coverage
        run: |
          pytest tests/ --verbose --cov=./ --cov-report=xml:coverage.xml

      - name: Upload coverage report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage.xml

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: ${{ github.event_name == 'push' }}
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache

  deploy:
    needs: build-and-test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Checkout source code
        uses: actions/checkout@v4

      - name: Install Minikube
        run: |
          curl -LO https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64
          sudo install minikube-linux-amd64 /usr/local/bin/minikube
          minikube start --driver=docker --wait=all
          minikube status

      - name: Set up kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'

      - name: Apply Kubernetes manifests
        run: |
          minikube kubectl -- apply -f k8s/deployment.yaml
          minikube kubectl -- apply -f k8s/services.yaml

      - name: Wait for deployment rollout
        run: |
          minikube kubectl -- rollout status deployment/flaskapp -n default --timeout=120s

      - name: Test deployment
        run: |
          minikube kubectl -- wait --for=condition=available deployment/flaskapp --timeout=60s
          POD_NAME=$(minikube kubectl -- get pod -l app=flaskapp -o jsonpath="{.items[0].metadata.name}")
          minikube kubectl -- port-forward pod/$POD_NAME 5000:5000 --address 0.0.0.0 &
          sleep 10
          curl http://localhost:5000 || exit 1

      # # AWS ECR login & push
      # - name: Configure AWS credentials
      #   uses: aws-actions/configure-aws-credentials@v3
      #   with:
      #     aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
      #     aws-secret-access-key: ${{ secrets.AWS_ACCESS_SECRET }}
      #     aws-region: ap-southeast-2

      # - name: Login to Amazon ECR
      #   id: ecr-login
      #   run: |
      #     aws ecr get-login-password --region ap-southeast-2 | docker login --username AWS --password-stdin 053277883308.dkr.ecr.ap-southeast-2.amazonaws.com

      # - name: Build and push ECR image
      #   uses: docker/build-push-action@v5
      #   with:
      #     context: .
      #     push: true
      #     tags: 053277883308.dkr.ecr.ap-southeast-2.amazonaws.com/k8s-project:latest

#  deploy-to-ec2:
#    needs: build-and-push
#    runs-on: ubuntu-latest
#
#    steps:
#      - name: SSH and deploy on EC2
#        uses: appleboy/ssh-action@v1.0.3
#        with:
#          host: ${{ secrets.EC2_HOST }}
#          username: ubuntu
#          key: ${{ secrets.EC2_SSH_KEY }}
#          script: |
#            aws ecr get-login-password --region ap-southeast-2 | docker login --username AWS --password-stdin 053277883308.dkr.ecr.ap-southeast-2.amazonaws.com
#            docker pull 053277883308.dkr.ecr.ap-southeast-2.amazonaws.com/k8s-project:latest
#            docker stop my-app || true
#            docker rm my-app || true
#           docker run -d --name my-app -p 80:5000 053277883308.dkr.ecr.ap-southeast-2.amazonaws.com/k8s-project:latest

  # deploy-to-ecs:
  #   needs: build-and-push
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4
      
  #     - name: Configure AWS credentials
  #       uses: aws-actions/configure-aws-credentials@v3
  #       with:
  #         aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
  #         aws-secret-access-key: ${{ secrets.AWS_ACCESS_SECRET }}
  #         aws-region: ap-southeast-2

  #     - name: Update ECS Service to use new image
  #       run: |
  #         aws ecs update-service \
  #           --cluster k8s-cluster-project \
  #           --service k8s-project-task-service-gzl8ewe4 \
  #           --force-new-deployment
